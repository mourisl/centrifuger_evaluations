#!/usr/bin/env perl

use strict ;
use warnings ;

use File::Basename;
use Cwd;
use Cwd 'cwd' ;
use Cwd 'abs_path' ;


die "Usage: centrifuger-promote centrifuger_index_name centrifuger_output centrifuger_kreport > output\n\n".
	"Use the kreport to reassign the read to the more abundant tax. If equal, then find lca.\n"
  if ( @ARGV == 0 ) ;

my $CWD = dirname( abs_path( $0 ) ) ;
# Go through the index to obtain the taxonomy tree
my %taxParent ; 
my %taxIdToSeqId ;
my %taxLevel ;

my $centrifuger_index = $ARGV[0] ;
open FP1, "-|", "$CWD/centrifuger-inspect --taxonomy-tree -x $centrifuger_index" or die "can't open $!\n" ;
while ( <FP1> )
{
	chomp ;
	my @cols = split /\t\|\t/;
	$taxParent{ $cols[0] } = $cols[1] ;
	$taxLevel{ $cols[0] } = $cols[2] ;
}
close FP1 ;
open FP1, "-|", "$CWD/centrifuger-inspect --conversion-table -x $centrifuger_index" or die "can't open $!\n" ;
while ( <FP1> )
{
	chomp ;
	my @cols = split /\t/ ;
	$taxIdToSeqId{ $cols[1] } = $cols[0] ;
}
close FP1 ;

my %taxAbund ;
open FP1, $ARGV[2] ;
while (<FP1>)
{
  chomp ;
  my @cols = split /\s+/;
  shift @cols if ($cols[0] eq "") ;
  $taxAbund{$cols[4]} = $cols[1] ;
}
close FP1 ;

# Go through the output of centrifuger
my $level = "lca" ;
sub PromoteTaxId
{
	my $tid = $_[0] ;
	return 0 if ( $tid <= 0 || !defined( $taxLevel{ $tid } ) ) ;

	if ( $taxLevel{ $tid } eq $level )
	{
		return $tid ;
	}
	else
	{
		return 0 if ( $tid <= 1 ) ;
		return PromoteTaxId( $taxParent{ $tid } ) ;
	}
}

sub lca 
{
	my ($a, $b) = @_;
	return $b if $a eq 0;
	return $a if $b eq 0;
	return $a if $a eq $b;
	my %a_path;
	while ($a ge 1) 
	{
		$a_path{$a} = 1;
		if (!defined $taxParent{$a}) {
			print STDERR "Couldn't find parent of taxID $a - directly assigned to root.\n";
			last;
		}
		last if $a eq $taxParent{$a};
		$a = $taxParent{$a};
	}

	while ($b > 1) 
	{
		return $b if (defined $a_path{$b});
		if (!defined $taxParent{$b}) {
			print STDERR "Couldn't find parent of taxID $b - directly assigned to root.\n";
			last;
		}
		last if $b eq $taxParent{$b};
		$b = $taxParent{$b};
	}
	return 1;
}

sub OutputPromotedLines
{
  my @lines = @{ $_[0] } ;
  return if ( scalar( @lines ) <= 0 ) ;

  my @newLines ;
  my $i ;
  my $numMatches = 0 ;
  my %showedUpTaxId ;
  my $tab = sprintf( "\t" ) ;
  my @cols ;

  my $bestAbund = -1 ;
  my $l = 0 ; # track the lca
  for ($i = 0 ; $i < scalar(@lines) ; ++$i)
  {
    @cols = split /\t+/, $lines[ $i ] ;
    my $taxId = $cols[2] ;
    if (defined $taxAbund{$taxId} && $taxAbund{$taxId} > $bestAbund)
    {
      $bestAbund = $taxAbund{$taxId} ;
      $l = $taxId ;
    }
    elsif ($bestAbund == -1 && !defined $taxAbund{$taxId})
    {
      $bestAbund = 0 ;
      $l = $taxId ;
    }
  }

  for ( $i = 0 ; $i < scalar( @lines ) ; ++$i )
  {
    @cols = split /\t+/, $lines[ $i ] ;
    my $abund = 0 ;
    $abund = $taxAbund{$cols[2]} if (defined $taxAbund{$cols[2]}) ;
    next if ($abund != $bestAbund) ;
    
    $l = lca( $l, $cols[2] ) ;
  }

  @cols = split /\t+/, $lines[0] ;
  $cols[1] = $taxLevel{ $l } if ( $l ne $cols[2] ) ;
  $cols[2] = $l ;
  push @newLines, join( $tab, @cols ) ;

  for ( $i = 0 ; $i < scalar( @newLines ) ; ++$i )
  {
    my @cols = split /\t+/, $newLines[$i] ;
    $cols[-1] = $numMatches ;
    print join( $tab, @cols ), "\n" ;
  }
}

open FP1, $ARGV[1] ;
my $header = <FP1> ;
my $prevReadId = "" ;
my @lines ;

print $header ;
while ( <FP1> )
{
	chomp ;
	my @cols = split /\t/ ;
	if ( $cols[0] eq $prevReadId )
	{
		push @lines, $_ ;
	}
	else
	{
		$prevReadId = $cols[0] ;
				
		OutputPromotedLines( \@lines ) ;

		undef @lines ;
		push @lines, $_ ;
	}
}
OutputPromotedLines( \@lines )  ;
close FP1 ;
